 #! /bin/sh 
set -e 

# Quello che faremo è:
# 1. Istanziare e configurare il DB *etcd* come container.
# 2. Generare i certificati necessari per garantire una comunicazione sicura delle componenti Kubernetes.
# 3. Deploy del cluster Kubernetes in versione singolo nodo, 
#    questo assumerà i ruoli di un nodo master/slave. 
# 4. Configurare la CLI *kubectl* per poter interagire con il cluster.  
# 5. Deploy delle componenti aggiuntive: DNS. 
#

export HOST_IP=127.0.0.1
# Come raggiungere etcd (http://ip:port)
export ETCD_ENDPOINTS="http://${HOST_IP}:2379" 

# La versione di (vX.Y.Z) Kubernetes
export K8S_VER=v1.6.1_coreos.0

# La repo dell-immagine Hyperkub da usare (Che cosa è hyperkube?)
export HYPERKUBE_IMAGE_REPO=quay.io/coreos/hyperkube

# La rete CIDR per gli IP dei pod.
# Necessario per la configurazione di flannel, il gestore dell'assegnazione degli IP. 
export POD_NETWORK=10.2.0.0/16

# La rete CIDR per da usare per le risorse di tipo Service.
export SERVICE_IP_RANGE=10.3.0.0/24

# Indirizzo interno per contattare il servizio API del cluster K8s.
export K8S_SERVICE_IP=10.3.0.1

# Come raggiungere il servizio DNS interno del cluster deployato come add-on.
export DNS_SERVICE_IP=10.3.0.10

# -------------

function init_etcd {

echo 
echo "Lancio di etcd..."
echo 

  local etcd_template=/etc/systemd/system/etcd2.service.d/40-listen-address.conf
  if [ ! -f $etcd_template ]; then 
  mkdir -p $(dirname $etcd_template)
  cat << EOF > $etcd_template
[Service]
Environment=ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
Environment=ETCD_ADVERTISE_CLIENT_URLS=${ETCD_ENDPOINTS}
EOF
  fi 

systemctl daemon-reload;

systemctl start etcd2
} ## FINE INIT_ETCD





function init_certs {
  echo "Preparazione dei certificati..."
  
  echo
  echo "Cert 1..."
  local CA=/etc/kubernetes/ssl/ca.pem 
  if [ ! -f $CA ]; then 
    echo "CA: $CA"
    mkdir -p $(dirname $CA)
    cat << EOF > $CA
-----BEGIN CERTIFICATE-----
MIIC9zCCAd+gAwIBAgIJAPiMYeY2tpHtMA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNV
BAMMB2t1YmUtY2EwHhcNMTcwNTE3MTQwNTE3WhcNNDQxMDAyMTQwNTE3WjASMRAw
DgYDVQQDDAdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
962XbShA0GU9c8qcc/BILh5LC8fH8TYeYdRHWiwQUbWLz/851Tu/V6g/KilhbSpY
exnux0c0OmAPvS5om5D9cs9R+r4x3TuW0BehBoIibeyp7HYeDxVG80xewBnJjO/v
FUTJD0j7/t/B8Y2PJTml7weNHupFpownE4iQS+om+uaFnkp4qeIVd/jp2MiG2VHo
YT235UpaDiTjyw1OYC/CtCUY6PKVl5qX8WNw7ubTnFvEFbJjR59yuFblNQgJgKqa
q7SdYPfCGqd+Uuo32mqlw6GlNh4XdciNTXqrwUx0m4T82VBa19/zBO1UGwwjeFQB
rFg3vL4GN5rINx5trneg3QIDAQABo1AwTjAdBgNVHQ4EFgQUqGLrKgoWnqSFD+O2
g7De4BsOtGwwHwYDVR0jBBgwFoAUqGLrKgoWnqSFD+O2g7De4BsOtGwwDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAFFHdsY2Xq93ibFvMgcXDggxvZ8TE
w7MLtn4pkOVUn2uT/zIE9o4Jnmmye78XzK82jAi19VY9lgDMYqR1xUXavQcuRv8Z
7ibz2tQkgsJc7N/suZVyWq+NS69+Oy5SvwI8Zn7m/TUSGzNhcczKaGfbEX/Pj4e/
PAJb44n7P6Hmuvqj/EGLYc1cyEKfibpsQZOu4L4Zunw7U1Hod2ftf7BsoM6GrArb
FffiYyl4ueYh1Y3QxbocXfhCmExKfNbHq0yc22eWjD//1dMKe0KAlC5ySF9vJgHD
R55mJ6pPAWJlVaUPxUklwsCa+FGT0DEEaRQgyCrB9UaXNI01qS5rNFTKuA==
-----END CERTIFICATE-----
EOF
   fi



  local APISERVER_CERT=/etc/kubernetes/ssl/apiserver.pem

  echo
  echo "Cert 2..." 
  if [ ! -f $APISERVER_CERT ]; then 
    echo "APISERVER_CERT: $APISERVER_CERT"
    mkdir -p $(dirname $APISERVER_CERT)
    cat << EOF > $APISERVER_CERT 
-----BEGIN CERTIFICATE-----
MIIDMzCCAhugAwIBAgIJAKGvMEfQ+zMAMA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNV
BAMMB2t1YmUtY2EwHhcNMTcwNTE3MTQ1NjAzWhcNMTgwNTE3MTQ1NjAzWjAZMRcw
FQYDVQQDDA5rdWJlLWFwaXNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBALt4bBPCXqOq9tt4LhV25uXw29dcDAwONaiRf8vGzL39KKU3fd14fRZ9
eXaVfn+9VvnINHSi9ZUwV0jh5bXuVpl7lNpUGFAneivVd/mZnR3nzES3j94iAc4/
LdVRpYo5tQ+YsjToeGOF7QaKHQgtqe+OxnRZMCew/bsuw0nuY+pN+0w4SN6fOV1N
9NP0cbhWhWWhTl0VuBunL8rnIFZtaEhj8j0+3bb5rmZyemF8vRiesn3mJuOdrljT
4s9ZQCTWaMSdu5VO132VgtV1hTokQbPeTTsBLx7NbRQCSjXhlprRSW4NeSY8/Vf7
FJj92mYExBdg4uroQBfwjYwxCoMIdW0CAwEAAaOBhDCBgTAJBgNVHRMEAjAAMAsG
A1UdDwQEAwIF4DBnBgNVHREEYDBeggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRl
ZmF1bHSCFmt1YmVybmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVs
dC5zdmMuY2x1c3Rlci5sb2NhbDANBgkqhkiG9w0BAQsFAAOCAQEAoYTSgi+Z8wHj
UaanLJ4SvXY2vBovR6lebTzL6gtBrrz0TUz1IQQsn3MueD2YxnQOK3xVs0p8pH7e
hNyMfrw74+P+8l0eQSl1PA4G4F/zr7Wj+Ozvwn+/nZjzBZmLX6fq5Z9I/VIICR/G
80FuwwalnosO7YHctRD7DYq1wNqymDoSGqdGLTt7ZSDTZPpJHhXuHozG17MxKeyU
+cj4SFD/ReBckfucloU/vpUDTbYTqb3+Ghh4WL1EvL8qbGUnYJojLSf5J+8U5Qsp
Vu3P96fx/4TgNxAdMP/kXT8tZm+U+PiRigmQCkvTc5o1JDY9Lm23ZR1EAvZr9+Ws
gQbhaoHGcw==
-----END CERTIFICATE-----
EOF
  fi 


  local APISERVER_KEY_CERT=/etc/kubernetes/ssl/apiserver-key.pem

  echo
  echo "Cert 3..."

  if [ ! -f $APISERVER_KEY_CERT ]; then 
    echo "APISERVER_KEY_CERT: $APISERVER_KEY_CERT"
    mkdir -p $(dirname $APISERVER_KEY_CERT)
    cat << EOF > $APISERVER_KEY_CERT 
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAu3hsE8Jeo6r223guFXbm5fDb11wMDA41qJF/y8bMvf0opTd9
3Xh9Fn15dpV+f71W+cg0dKL1lTBXSOHlte5WmXuU2lQYUCd6K9V3+ZmdHefMRLeP
3iIBzj8t1VGlijm1D5iyNOh4Y4XtBoodCC2p747GdFkwJ7D9uy7DSe5j6k37TDhI
3p85XU300/RxuFaFZaFOXRW4G6cvyucgVm1oSGPyPT7dtvmuZnJ6YXy9GJ6yfeYm
452uWNPiz1lAJNZoxJ27lU7XfZWC1XWFOiRBs95NOwEvHs1tFAJKNeGWmtFJbg15
Jjz9V/sUmP3aZgTEF2Di6uhAF/CNjDEKgwh1bQIDAQABAoIBAQCIxH30nGT2+o9F
5hOYzTn+nw2DvD99vBAhfqTBQbO1F7BDeIx2uqRnd/rZLI8xGi0N5aV/QjPwN2g2
X7d6VvsO1j3uWlOyhlp3CDGTAyLA4o7/wvtOj3jJwwXpDru6cAdL7ZZ1SvQph1c4
4iH0CXxkrMDTuQ2Mp2801BTdJvH1yNa7F8yS8H7hE2UiPKNlAnIR4+feKffCVMnT
zhdxy2TMAmp7DWUDrBFd6OToiZIqwytw13gOueACwG4kGbhfM/1TEo+vYTHzHS+0
mRF9/3ONlTqEMxEW6mJHOvnukSsWzy7JpDJl4ozDiGFEso7ioCpivUOpsM5cN2wl
nsX37IJxAoGBAOFBiKqlgsKgQE1wyPmnwUD0FLWl01FVBesrnbpFV2WczWWjXkIJ
9jDoF+wrw6X4azQQfQGMd9JHDWOodTM55dsSfpH+rrk6x2iLc37RtEN6b4NP9rqs
DpJh0Qtdvk4PiRNDA7tftSCki1lmON+m6O9jh/B3SAK5wHq1UEksZ/nfAoGBANUO
p/PVn1sqhqY43H63ekPiiS6KJReouoSildy3/x96yE87nvFL0QaTGEwF4pUZnnCM
iSjnxJxfC9y+CGoT4y+zXVJmMkiZ5GIG98bC0CXnqFuRqIdI5it+nOzO3nYDUDwI
MprrJin8COGoakegw/5ScZ4YR2wYRb7xSol9QBIzAoGBANqKOSzOfUmULi6z0Nie
T9lTtU/yvU14PtDFtTZGFh/IfGIymL1batZSJvuEDkJU/LU7lfxNquaA9tWMV4DG
mGHt1IySWjPteg/M09XjYI/jFpOAnjDHwy9z5VuwrHSRj/z3FITSuykbWvL2QRGD
nxS6LOY44815J+wlQuprQcljAoGAW6uQrCNQC4PCp6ZziLodCzRfXfzmdMWOax8h
Z/Rq+vpzUVQP0TaT20ZS//LQSOLa/wYYxdbjC30Bt5q0OCASciW0k42RORet4lep
KIYN1SFVmQCVCJBfKHuzvVhM8239ibblPy7KHupoT9+MywDrE3QZmrJLmMDg0YU0
Uu/nL20CgYBq3QrLqiPkDIkNzyWOEiUUXJWxXblYC5eHWU4NH7pV6he5WX9qPh7Z
35KGsz2hkaToOjIayHHLeK5C3kzHzDfA+nDQgLYGSUdLxjfd9zGVW4G57ek6+h8W
TQOqRKkTyNODjObrFsbt2QZ8xZoVjEmdLGCJ1G51luqs6rLxIZP7Mw==
-----END RSA PRIVATE KEY-----
EOF
  fi 

  echo 
  echo "Configuro il permesso 600 per ogni certificati chiave presente"
  echo 
  echo "Faccio diventare i certificati di proprieta di root"
  echo
  chmod 600 /etc/kubernetes/ssl/*-key.pem
  chown root:root /etc/kubernetes/ssl/*-key.pem
} ## FINE INIT_CERTS



function init_flannel {
    echo "Check per etcd..."
    curl -X PUT -d "value={\"Network\":\"$POD_NETWORK\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ETCD_ENDPOINTS/v2/keys/coreos.com/network/config"
} ## FINE INIT_FLANNEL

function init_templates {
    local TEMPLATE=/etc/systemd/system/kubelet.service
    local uuid_file="/var/run/kubelet-pod.uuid"
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service]
Environment=KUBELET_IMAGE_TAG=${K8S_VER}
Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
  --volume var-log,kind=host,source=/var/log \
  --mount volume=var-log,target=/var/log \
  --volume dns,kind=host,source=/etc/resolv.conf \
  --mount volume=dns,target=/etc/resolv.conf"
ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
ExecStartPre=/usr/bin/mkdir -p /var/log/containers
ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
ExecStart=/usr/lib/coreos/kubelet-wrapper \
  --api-servers=http://127.0.0.1:8080 \
  --register-schedulable=true \
  --cni-conf-dir=/etc/kubernetes/cni/net.d \
  --network-plugin=cni \
  --container-runtime=docker \
  --allow-privileged=true \
  --pod-manifest-path=/etc/kubernetes/manifests \
  --hostname-override=localhost \
  --cluster_dns=${DNS_SERVICE_IP} \
  --cluster_domain=cluster.local
ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    fi

    local TEMPLATE=/etc/kubernetes/manifests/kube-apiserver.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - apiserver
    - --bind-address=0.0.0.0
    - --advertise-address=10.0.2.15
    - --etcd-servers=${ETCD_ENDPOINTS}
    - --allow-privileged=true
    - --storage-backend=etcd2
    - --service-cluster-ip-range=${SERVICE_IP_RANGE}
    - --secure-port=443
    - --insecure-bind-address=${HOST_IP}
    - --insecure-port=8080
    - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --client-ca-file=/etc/kubernetes/ssl/ca.pem
    - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --runtime-config=extensions/v1beta1/networkpolicies=true
    - --anonymous-auth=true
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        port: 8080
        path: /healthz
      initialDelaySeconds: 15
      timeoutSeconds: 15
    ports:
    - containerPort: 443
      hostPort: 443
      name: https
    - containerPort: 8080
      hostPort: 8080
      name: local
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi


     local TEMPLATE=/etc/kubernetes/manifests/kube-proxy.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-proxy
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-proxy
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - proxy
    - --master=http://127.0.0.1:8080
    - --cluster-cidr=${POD_NETWORK}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi


    local TEMPLATE=/etc/kubernetes/manifests/kube-controller-manager.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-controller-manager
  namespace: kube-system
spec:
  containers:
  - name: kube-controller-manager
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - controller-manager
    - --master=http://127.0.0.1:8080
    - --leader-elect=true
    - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --root-ca-file=/etc/kubernetes/ssl/ca.pem
    resources:
      requests:
        cpu: 200m
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10252
      initialDelaySeconds: 15
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  hostNetwork: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi

    local TEMPLATE=/etc/kubernetes/manifests/kube-scheduler.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-scheduler
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-scheduler
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - scheduler
    - --master=http://127.0.0.1:8080
    - --leader-elect=true
    resources:
      requests:
        cpu: 100m
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10251
      initialDelaySeconds: 15
      timeoutSeconds: 15
EOF
   fi
    
    local TEMPLATE=/etc/flannel/options.env
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
FLANNELD_IFACE=${HOST_IP}
FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS}
EOF
    fi

    local TEMPLATE=/etc/systemd/system/flanneld.service.d/40-ExecStartPre-symlink.conf.conf
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service]
ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
EOF
    fi

    
    local TEMPLATE=/etc/systemd/system/docker.service.d/40-flannel.conf
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Unit]
Requires=flanneld.service
After=flanneld.service
[Service]
EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
EOF
    fi

    
    
    local TEMPLATE=/etc/kubernetes/cni/docker_opts_cni.env
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
DOCKER_OPT_BIP=""
DOCKER_OPT_IPMASQ=""
EOF
    fi



    local TEMPLATE=/etc/kubernetes/cni/net.d/10-flannel.conf
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
{
    "name": "podnet",
    "type": "flannel",
    "delegate": {
        "isDefaultGateway": true
    }
}
EOF
    fi
}

function start_addons {
    echo "Checking del API server di Kubernetes API"
    until curl --silent "http://127.0.0.1:8080/version"
    do
        sleep 5
    done
} ## 

function test_bootstrap {
  echo 
  echo "Verifico se è iniziato il download dei container di servizio..."

  curl -s localhost:10255/pods | jq -r '.items[].metadata.name'
# Io mi aspetto un output come segue  
# kube-scheduler-$node
# kube-apiserver-$node
# kube-controller-$node
# kube-proxy-$node
} ## 

function get_kubectl {
  echo "Inizio a scaricare..."
  cd ~
  curl -O https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubectl >> /dev/null
 
  echo "Ho finito!!!"

  echo "Preparo lo kubectl..."
  chmod +x kubectl 
  mv kubectl /usr/local/bin/kubectl

  echo "Check se funziona kubectl..."

  local RES=$(kubectl get no)
  if [! -z  $RES]; then 
     echo "kubectl - pronto!"
   else 
     echo "kubectl - non pronto!"
  fi
} ##



for job in init_certs init_templates init_etcd init_flannel
do 
  $job &
  wait $!
done




systemctl stop update-engine; 

systemctl disable update-engine

systemctl daemon-reload



systemctl enable {flanneld,kubelet}

systemctl start  flanneld
systemctl start  docker
systemctl start  kubelet


#get_kubectl

#test_bootstrap


echo "FINITO!!!"

