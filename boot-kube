#! /bin/sh 
set -ev 

# Quello che faremo è:
# 1. Istanziare e configurare il DB *etcd* come container.
# 2. Generare i certificati necessari per garantire una comunicazione sicura delle componenti Kubernetes.
# 3. Deploy del cluster Kubernetes in versione singolo nodo, 
#    questo assumerà i ruoli di un nodo master/slave. 
# 4. Configurare la CLI *kubectl* per poter interagire con il cluster.  
# 5. Deploy delle componenti aggiuntive: DNS. 
#

export HOST_IP=172.17.8.101
# Come raggiungere etcd (http://ip:port)
export ETCD_ENDPOINTS=http://127.0.0.1:2379 ### Cambiami se l'IP della macchina è diverso.

# La versione di (vX.Y.Z) Kubernetes
export K8S_VER=v1.6.0_coreos.0

# La repo dell-immagine Hyperkub da usare (Che cosa è hyperkube?)
export HYPERKUBE_IMAGE_REPO=quay.io/coreos/hyperkube

# La rete CIDR per gli IP dei pod.
# Necessario per la configurazione di flannel, il gestore dell'assegnazione degli IP. 
export POD_NETWORK=10.2.0.0/16

# La rete CIDR per da usare per le risorse di tipo Service.
export SERVICE_IP_RANGE=10.3.0.0/24

# Indirizzo interno per contattare il servizio API del cluster K8s.
export K8S_SERVICE_IP=10.3.0.1

# Come raggiungere il servizio DNS interno del cluster deployato come add-on.
export DNS_SERVICE_IP=10.3.0.10

# -------------

function init_etcd {

echo 
echo "Lancio di etcd..."
echo 

  local etcd_template=/etc/systemd/system/etcd2.service.d/40-listen-address.conf
  if [ ! -f $etcd_template ]; then 
  mkdir -p $(dirname $etcd_template)
  cat << EOF > $etcd_template
[Service]
Environment=ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
Environment=ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379
EOF
  fi 

systemctl daemon-reload;

systemctl start etcd2
}

function init_certs {
  echo "Preparazione dei certificati..."
  
  echo
  echo "Cert 1..."
  local CA=/etc/kubernetes/ssl/ca.pem 
  if [ ! -f $CA ]; then 
    echo "CA: $CA"
    mkdir -p $(dirname $CA)
    cat << EOF > $CA
-----BEGIN CERTIFICATE-----
MIIDxTCCAq2gAwIBAgIJAM0gpqK7hjJrMA0GCSqGSIb3DQEBCwUAMHkxCzAJBgNV
BAYTAklUMQswCQYDVQQIDAJNSTEOMAwGA1UEBwwFTWlsYW4xDDAKBgNVBAoMA0lL
UzEMMAoGA1UECwwDSVRJMQwwCgYDVQQDDANpa3MxIzAhBgkqhkiG9w0BCQEWFGFu
ZHJlaS5wZXRyb3ZAaWtzLml0MB4XDTE3MDUwMzE1MjM1NVoXDTQ0MDkxODE1MjM1
NVoweTELMAkGA1UEBhMCSVQxCzAJBgNVBAgMAk1JMQ4wDAYDVQQHDAVNaWxhbjEM
MAoGA1UECgwDSUtTMQwwCgYDVQQLDANJVEkxDDAKBgNVBAMMA2lrczEjMCEGCSqG
SIb3DQEJARYUYW5kcmVpLnBldHJvdkBpa3MuaXQwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQCdUBPxD/7z4kfligH2tpiBRa+5YQD9M8WCs6nOqX6IFR87
TSif6qjDF5gCpsrgvnlcxKAfkwmoXWokhYzDehkaa9pYrAbb7cKBW5memd+ZUGHu
MU5J/+wmGi0dObDYeiqR46DI3J8LOf5muvmWGymUURLNZNV7Is/iWvJ6Wo1YJ3Ca
CW+mjAuvY/JLLrL/QguGcgxiHQn08S92RkQfX1D+lLgiTo6imr366qNvKDtPYreO
FW7ya4BtuI9uTn7l87Bn6ugwnzpjrIybPeP1l5CRiF/0Cnb3bFicNFUf2EO4by68
6mQQcI5Wvge10o3498ul07kLbReNKbRG/ppbbqAXAgMBAAGjUDBOMB0GA1UdDgQW
BBTy62VddMYxa1hvpz7wj65FF7SjJzAfBgNVHSMEGDAWgBTy62VddMYxa1hvpz7w
j65FF7SjJzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAxHCPACFog
pxkVsPsy7HLdnyuTTjqs6qFpVonPHsGyQ2442KwUqg4Rqmnu/MrmbWKOUTeN0ADz
EqSeOugYtkWfvh1MlozdouPrJNBk+i4cVI+jiju89o2+pvQbjHz9lcmbKzakSXeS
tJzP51zTB7l0TTyHaainnr6EOz0o52F9sT5vatsIUhkRo4fKTvmZ0swVV1zI/Lq9
fbPULOoQZiZeuD0Haj6n9izGrCaRzh9ayW9I66Bcrw4jkkOvF8g861812Bk+SDUo
H+umGRrAD9I11j8TR1zFVvE4m65xHtcXt2fbNfDtRgK+QY2/vQE9C36GnBhymvIq
mouzp0Hyy3Kv
-----END CERTIFICATE-----    
EOF
   fi



  local APISERVER_CERT=/etc/kubernetes/ssl/apiserver.pem
  echo
  echo "Cert 2..." 
  if [ ! -f $APISERVER_CERT ]; then 
    echo "APISERVER_CERT: $APISERVER_CERT"
    mkdir -p $(dirname $APISERVER_CERT)
    cat << EOF > $APISERVER_CERT 
-----BEGIN CERTIFICATE-----
MIID5DCCAsygAwIBAgIJAP2olnP+02hvMA0GCSqGSIb3DQEBBQUAMHkxCzAJBgNV
BAYTAklUMQswCQYDVQQIDAJNSTEOMAwGA1UEBwwFTWlsYW4xDDAKBgNVBAoMA0lL
UzEMMAoGA1UECwwDSVRJMQwwCgYDVQQDDANpa3MxIzAhBgkqhkiG9w0BCQEWFGFu
ZHJlaS5wZXRyb3ZAaWtzLml0MB4XDTE3MDUwMzE2MjMwOFoXDTE4MDUwMzE2MjMw
OFowGTEXMBUGA1UEAwwOa3ViZS1hcGlzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQC+BnEHh6uDxS35ch5zoR6yJID1SX5Ke4IwsxvF1GjZNMqb
CzjQ2u2nHxkGoYfl5f8hJJRKPQzPAJl+HU8k7lN7U3p4iSVpqiI3vU7Lo5cexV6u
yASHR02mm3gOKsajacrIh+XpimVHTi0iqeUnBSPfDgWWHM15UP3JKmkEqCmBi175
KfufFLdWnRCx+MQXcjBJGm9CthCXgdGg/+3DxptQwDHUpXSpURAAVigAdNHOB2L7
MxdhbTj8DRA62BwY2jnoEjeS7V+DcVKdLCCu7apHsy7cbhQciWzbEGL+v6W2GYKw
gr3N3wRoDSwjjT0mvoNCsxf5vWcfykUTON/EOv/rAgMBAAGjgc4wgcswCQYDVR0T
BAIwADALBgNVHQ8EBAMCBeAwgbAGA1UdEQSBqDCBpYIKa3ViZXJuZXRlc4ISa3Vi
ZXJuZXRlcy5kZWZhdWx0ghZrdWJlcm5ldGVzLmRlZmF1bHQuc3ZjgiRrdWJlcm5l
dGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWyCFmNvcmVvczAxLm92aXJ0Lmlr
cy5sYWKCG3gtZWxrLWtub2RlMDIub3ZpcnQuaWtzLmxhYocECgMAAYcEwKiNH4cE
wKiNGzANBgkqhkiG9w0BAQUFAAOCAQEAl3M8y4qm0EyrZxmflnAZBZdcRZAAkqn9
tUfGSgbNPo9DFRakrjGi1MgTKCt0hShQyrunHDgmeyVs67lwnv3bd5Jdc5/lhdeI
APxrS7/uiZy1BAHx045VnPHfiG9bPFe4SH6KjTtp5ZUkpTPGLIiNjiH1B8UUNVTx
IeahpDZxZwNW4mi6WXPookdEZ4sbQX9Wlz9T5SJx4Yzqj6ZyG4CKKHlxO4XuKzHM
S0geevYPIwePtygz8f2GfMGdnErq73pwlSSWeI+vlO9knPnMi805hTO/MbOTB9ET
//Txm7oVn6kuhDDWVg3TjmAGOuDgDXsE+i04y0tcnMIBusd6fm40xw==
-----END CERTIFICATE-----
EOF
  fi 


  local APISERVER_KEY_CERT=/etc/kubernetes/ssl/apiserver-key.pem

  echo
  echo "Cert 3..."

  if [ ! -f $APISERVER_KEY_CERT ]; then 
    echo "APISERVER_CERT: $APISERVER_KEY_CERT"
    mkdir -p $(dirname $APISERVER_KEY_CERT)
    cat << EOF > $APISERVER_KEY_CERT 
-----BEGIN CERTIFICATE-----
MIID5DCCAsygAwIBAgIJAP2olnP+02hvMA0GCSqGSIb3DQEBBQUAMHkxCzAJBgNV
BAYTAklUMQswCQYDVQQIDAJNSTEOMAwGA1UEBwwFTWlsYW4xDDAKBgNVBAoMA0lL
UzEMMAoGA1UECwwDSVRJMQwwCgYDVQQDDANpa3MxIzAhBgkqhkiG9w0BCQEWFGFu
ZHJlaS5wZXRyb3ZAaWtzLml0MB4XDTE3MDUwMzE2MjMwOFoXDTE4MDUwMzE2MjMw
OFowGTEXMBUGA1UEAwwOa3ViZS1hcGlzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQC+BnEHh6uDxS35ch5zoR6yJID1SX5Ke4IwsxvF1GjZNMqb
CzjQ2u2nHxkGoYfl5f8hJJRKPQzPAJl+HU8k7lN7U3p4iSVpqiI3vU7Lo5cexV6u
yASHR02mm3gOKsajacrIh+XpimVHTi0iqeUnBSPfDgWWHM15UP3JKmkEqCmBi175
KfufFLdWnRCx+MQXcjBJGm9CthCXgdGg/+3DxptQwDHUpXSpURAAVigAdNHOB2L7
MxdhbTj8DRA62BwY2jnoEjeS7V+DcVKdLCCu7apHsy7cbhQciWzbEGL+v6W2GYKw
gr3N3wRoDSwjjT0mvoNCsxf5vWcfykUTON/EOv/rAgMBAAGjgc4wgcswCQYDVR0T
BAIwADALBgNVHQ8EBAMCBeAwgbAGA1UdEQSBqDCBpYIKa3ViZXJuZXRlc4ISa3Vi
ZXJuZXRlcy5kZWZhdWx0ghZrdWJlcm5ldGVzLmRlZmF1bHQuc3ZjgiRrdWJlcm5l
dGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWyCFmNvcmVvczAxLm92aXJ0Lmlr
cy5sYWKCG3gtZWxrLWtub2RlMDIub3ZpcnQuaWtzLmxhYocECgMAAYcEwKiNH4cE
wKiNGzANBgkqhkiG9w0BAQUFAAOCAQEAl3M8y4qm0EyrZxmflnAZBZdcRZAAkqn9
tUfGSgbNPo9DFRakrjGi1MgTKCt0hShQyrunHDgmeyVs67lwnv3bd5Jdc5/lhdeI
APxrS7/uiZy1BAHx045VnPHfiG9bPFe4SH6KjTtp5ZUkpTPGLIiNjiH1B8UUNVTx
IeahpDZxZwNW4mi6WXPookdEZ4sbQX9Wlz9T5SJx4Yzqj6ZyG4CKKHlxO4XuKzHM
S0geevYPIwePtygz8f2GfMGdnErq73pwlSSWeI+vlO9knPnMi805hTO/MbOTB9ET
//Txm7oVn6kuhDDWVg3TjmAGOuDgDXsE+i04y0tcnMIBusd6fm40xw==
-----END CERTIFICATE-----
EOF
  fi 

  echo 
  echo "Configuro il permesso 600 per ogni certificati chiave presente"
  echo 
  echo "Faccio diventare i certificati di proprieta di root"
  echo
  chmod 600 /etc/kubernetes/ssl/*-key.pem
  chown root:root /etc/kubernetes/ssl/*-key.pem


}



function init_flannel {
    echo "Check per etcd..."
    curl -X PUT -d "value={\"Network\":\"$POD_NETWORK\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ETCD_ENDPOINTS/v2/keys/coreos.com/network/config"
}

function init_templates {
    local TEMPLATE=/etc/systemd/system/kubelet.service
    local uuid_file="/var/run/kubelet-pod.uuid"
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service]
Environment=KUBELET_IMAGE_TAG=${K8S_VER}
Environment=KUBELET_IMAGE_URL=${HYPERKUBE_IMAGE_REPO}
Environment="RKT_RUN_ARGS=--uuid-file-save=${uuid_file} \
  --volume var-log,kind=host,source=/var/log \
  --mount volume=var-log,target=/var/log \
  --volume dns,kind=host,source=/etc/resolv.conf \
  --mount volume=dns,target=/etc/resolv.conf"

ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
ExecStartPre=/usr/bin/mkdir -p /var/log/containers
ExecStartPre=-/usr/bin/rkt rm --uuid-file=${uuid_file}
ExecStart=/usr/lib/coreos/kubelet-wrapper \
  --api-servers=http://127.0.0.1:8080 \
  --register-schedulable=true \
  --cni-conf-dir=/etc/kubernetes/cni/net.d \
  --network-plugin=cni \
  --container-runtime=docker \
  --allow-privileged=true \
  --pod-manifest-path=/etc/kubernetes/manifests \
  --hostname-override=${HOST_IP} \
  --cluster_dns=${DNS_SERVICE_IP} \
  --cluster_domain=cluster.local
ExecStop=-/usr/bin/rkt stop --uuid-file=${uuid_file}
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    fi

    local TEMPLATE=/etc/kubernetes/manifests/kube-apiserver.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - apiserver
    - --bind-address=0.0.0.0
    - --etcd-servers=${ETCD_ENDPOINTS}
    - --allow-privileged=true
    - --service-cluster-ip-range=${SERVICE_IP_RANGE}
    - --secure-port=443
    - --advertise-address=${HOST_IP}
    - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --client-ca-file=/etc/kubernetes/ssl/ca.pem
    - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --runtime-config=extensions/v1beta1/networkpolicies=true
    - --anonymous-auth=false
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        port: 8080
        path: /healthz
      initialDelaySeconds: 15
      timeoutSeconds: 15
    ports:
    - containerPort: 443
      hostPort: 443
      name: https
    - containerPort: 8080
      hostPort: 8080
      name: local
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi


     local TEMPLATE=/etc/kubernetes/manifests/kube-proxy.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-proxy
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-proxy
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - proxy
    - --master=http://127.0.0.1:8080
    - --cluster-cidr=${POD_NETWORK}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi


    local TEMPLATE=/etc/kubernetes/manifests/kube-controller-manager.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-controller-manager
  namespace: kube-system
spec:
  containers:
  - name: kube-controller-manager
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - controller-manager
    - --master=http://127.0.0.1:8080
    - --leader-elect=true
    - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --root-ca-file=/etc/kubernetes/ssl/ca.pem
    resources:
      requests:
        cpu: 200m
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10252
      initialDelaySeconds: 15
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  hostNetwork: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF
    fi

    local TEMPLATE=/etc/kubernetes/manifests/kube-scheduler.yaml
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
apiVersion: v1
kind: Pod
metadata:
  name: kube-scheduler
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-scheduler
    image: ${HYPERKUBE_IMAGE_REPO}:${K8S_VER}
    command:
    - /hyperkube
    - scheduler
    - --master=http://127.0.0.1:8080
    - --leader-elect=true
    resources:
      requests:
        cpu: 100m
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10251
      initialDelaySeconds: 15
      timeoutSeconds: 15
EOF
    
    local TEMPLATE=/etc/flannel/options.env
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
FLANNELD_IFACE=${HOST_IP}
FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS}
EOF
    fi

    local TEMPLATE=/etc/systemd/system/flanneld.service.d/40-ExecStartPre-symlink.conf.conf
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service]
ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
EOF
    fi

    local TEMPLATE=/etc/systemd/system/docker.service.d/40-flannel.conf
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Unit]
Requires=flanneld.service
After=flanneld.service
[Service]
EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
EOF
    fi

    local TEMPLATE=/etc/kubernetes/cni/docker_opts_cni.env
    if [ ! -f $TEMPLATE ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
DOCKER_OPT_BIP=""
DOCKER_OPT_IPMASQ=""
EOF
    fi

    local TEMPLATE=/etc/kubernetes/cni/net.d/10-flannel.conf
    if [ ! -f "${TEMPLATE}" ]; then
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
{
    "name": "podnet",
    "type": "flannel",
    "delegate": {
        "isDefaultGateway": true
    }
}
EOF
    fi
}

function start_addons {
    echo "Checking del API server di Kubernetes API"
    until curl --silent "http://127.0.0.1:8080/version"
    do
        sleep 5
    done
}

function test_bootstrap {
  echo 
  echo "Verifico se è iniziato il download dei container di servizio..."

  curl -s localhost:10255/pods | jq -r '.items[].metadata.name'
# Io mi aspetto un output come segue  
# kube-scheduler-$node
# kube-apiserver-$node
# kube-controller-$node
# kube-proxy-$node

}

function get_kubectl {
  echo "Inizio a scaricare..."
  cd ~
  curl -O https://storage.googleapis.com/kubernetes-release/release/v1.6.0/bin/linux/amd64/kubectl >> /dev/null
 
  echo "Ho finito!!!"

  echo "Preparo lo kubectl..."
  chmod +x kubectl 
  mv kubectl /usr/local/bin/kubectl

  echo "Check se funziona kubectl..."

  local RES=$(kubectl get no)
  if [! -z  $RES]; then 
     echo "kubectl - pronto!"
   else 
     echo "kubectl - non pronto!"
  fi
}



for job in init_certs init_templates init_etcd init_flannel
do 
  $job &
  wait $!
done




systemctl stop update-engine; 

systemctl disable update-engine

systemctl daemon-reload



systemctl enable {flanneld,kubelet}

  systemctl start  flanneld
  systemctl start  docker
  systemctl start  kubelet
#get_kubectl

#test_bootstrap
echo "FINITO!!!"